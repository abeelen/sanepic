
#ifndef IMAGEIO_H_
#define IMAGEIO_H_

#include <iostream>
#include <string>
#include <vector>

#include "struct_definition.h"

extern "C" {
#include <fitsio.h>
#include "wcslib/wcs.h"
}

#ifdef USE_MPI
#include "mpi.h"
#endif


using namespace std;

//! Extract the header METADATA from an input fits file (scan)
/*!
 \param fname The input fits data filename
 \param key A vector containing input fits METADATA keys
 \param datatype A vector containing input fits METADATA datatypes
 \param val A vector containing input fits METADATA values
 \param com A vector containing input fits METADATA commentaries
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int get_fits_META(string fname, std::vector<string> &key, std::vector<int> &datatype, std::vector<string> &val, std::vector<string> &com);

//! Create or update an output fits map file
/*!
 * Add a new table which type is "dtype", which contains "data" \n
 * Generate a fits header for the new table, including input fits METADATA
 \param fname The output fits map filename
 \param wcs A pointer to a wcsprm struct
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param dtype A character specifying the new table type ('d' for double, 'l' for long)
 \param data A table containing data to write in the new fits image
 \param table_name The new table will be given this name
 \param fits_already_exist A boolean that determines whether the routine has to create a new file (False) or not (True), before creating the new table
 \param key A vector containing input fits METADATA keys
 \param datatype A vector containing input fits METADATA datatypes
 \param val A vector containing input fits METADATA values
 \param com A vector containing input fits METADATA commentaries
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int write_fits_wcs(string fname, struct wcsprm * wcs, long NAXIS1, long NAXIS2,  char dtype, void *data, string table_name ,bool fits_already_exist, std::vector<string> key, std::vector<int> datatype, std::vector<string> val, std::vector<string> com);

//! Add a table in the output map
/*!
 * Write structures informations into this table
 \param fname The output fits map filename
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param dir The param_common structure
 \param samples_struct The samples structure
 \param pos_param The param_sanePos structure
 \param proc_param The param_sanePre structure
 \param fcut A vector containing the fcut values
 \param PS_param The param_sanePS structure
 \param Pic_param The param_sanePic structure
 \param Inv_param The param_saneInv structure
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int write_fits_history2(std::string fname, long NAXIS1, long NAXIS2, struct param_common dir, struct param_sanePre proc_param, struct param_sanePos pos_param, std::vector<double> fcut, struct samples samples_struct, struct param_sanePS PS_param, struct param_sanePic Pic_param, struct param_saneInv Inv_param);


//! copy mask image from "maskfile" fits image to "fname"
/*!
 \param fname The output fits image filename, this map is generated by sanePos (naivMap) or sanePic (final map)
 \param maskfile The input fits image filename, containing the mask map
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int write_fits_mask(std::string fname, std::string maskfile);

//! Extract a mask image data from fits image named "fname"
/*!
 * Reads wcs, NAXIS1 and NAXIS2 in the header \n
 * Those informations will determine the final map parameters (sanePos does not compute wcs and NAXIS)
 \param fname The input fits image filename
 \param extname Mask HDU name in the input fits file
 \param wcs A pointer to a wcsprm struct
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param data Binary mask data which size is the same has the final map
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int read_mask_wcs(string fname, string extname, struct wcsprm *& wcs, long &NAXIS1, long &NAXIS2,  short *& data);


//! Extract the signal data from a map named "fname" (fits image)
/*!
 * Reads the fits file header and signal \n
 * Verify that the wcs, NAXIS1 and 2 are the same (compare_wcs)
 \param fname The input fits image filename
 \param S The signal extracted from this map
 \param indpix The pixels indices table
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param wcs A pointer to a wcsprm struct
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int read_fits_signal(string fname, double *S, long long* indpix, long NAXIS1, long NAXIS2, struct wcsprm * wcs);

//! write wcs structure contents to "mapheader.keyrec" on disk
/*!
 \param tmpdir A string containing the temporary files path
 \param wcs A pointer to a wcsprm struct, read_keyrec will store maphdeader.keyrec info in this struct
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int save_keyrec(string tmpdir, struct wcsprm * wcs, long NAXIS1, long NAXIS2);

//! Read mapheader.keyrec file from disk
/*!
 * Rank 0 reads the file and broadcast to the other ranks \n
 * Save the informations in a wcsprm struct
 \param tmpdir A string containing the temporary files path
 \param wcs A pointer to a wcsprm struct, read_keyrec will store maphdeader.keyrec info in this struct
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param rank The processor rank given by MPI_Comm_rank, in case paraframe or parabolo is defined
 \return An integer >0 if there were a problem, or 0 if everything went OK
 */
int read_keyrec(string tmpdir, struct wcsprm *& wcs, long *NAXIS1, long *NAXIS2, int rank);

//! Print wcs structure to screen output (used for debug)
/*!
 \param wcs A pointer to a wcsprm struct
 \return An integer specifying if there were an error (>0) or not (=0)
 */
int print_MapHeader(struct wcsprm * wcs);

//! Compare 2 wcs structure (each field is compared)
/*!
 * Called by read_fits_signal in sanePS' main, to substract signal from data\n
 * We need to check that the map is correct, so both input map and ini file must have the same wcs infos
 \param fname A map file (fits image) named "fname"
 \param wcs A pointer to a wcsprm struct, computed by sanePos
 \param wcs_fits A pointer to a wcsprm struct, extracted from a fits image
 \param NAXIS1 Number of horizontal pixels (determined by sanePos)
 \param NAXIS2 Number of vertical pixels (determined by sanePos)
 \param imNAXIS1 Number of horizontal pixels (in the fits image file)
 \param imNAXIS2 Number of vertical pixels (in the fits image file)
 \return An integer : 1 if the structure are different, 0 otherwise
 */
int compare_wcs(std::string fname, struct wcsprm *wcs, struct wcsprm *wcs_fits, long NAXIS1, long NAXIS2, long imNAXIS1, long imNAXIS2);


#endif /* IMAGEIO_H_ */

